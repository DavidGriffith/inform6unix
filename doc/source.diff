diff -c V6.21/files.c Latest/files.c
*** V6.21/files.c	Fri Oct 15 07:47:19 1999
--- Latest/files.c	Wed Nov 24 10:43:23 1999
***************
*** 14,19 ****
--- 14,21 ----
  
  #include "header.h"
  
+ #define PATHLEN 512
+ 
  int input_file;                         /* Number of source files so far     */
  
  int32 total_chars_read;                 /* Characters read in (from all
***************
*** 37,43 ****
  /* ------------------------------------------------------------------------- */
  
  FILE *Temp1_fp=NULL, *Temp2_fp=NULL,  *Temp3_fp=NULL;
! char Temp1_Name[128], Temp2_Name[128], Temp3_Name[128];
  
  /* ------------------------------------------------------------------------- */
  /*   Opening and closing source code files                                   */
--- 39,45 ----
  /* ------------------------------------------------------------------------- */
  
  FILE *Temp1_fp=NULL, *Temp2_fp=NULL,  *Temp3_fp=NULL;
! char Temp1_Name[PATHLEN], Temp2_Name[PATHLEN], Temp3_Name[PATHLEN];
  
  /* ------------------------------------------------------------------------- */
  /*   Opening and closing source code files                                   */
***************
*** 48,54 ****
      /*  Meaning: open a new file of Inform source.  (The lexer picks up on
          this by noticing that input_file has increased.)                     */
  
!     char name[128]; int x = 0; FILE *handle;
  
      if (input_file == MAX_SOURCE_FILES)
          fatalerror("Program contains too many source files: \
--- 50,56 ----
      /*  Meaning: open a new file of Inform source.  (The lexer picks up on
          this by noticing that input_file has increased.)                     */
  
!     char name[PATHLEN]; int x = 0; FILE *handle;
  
      if (input_file == MAX_SOURCE_FILES)
          fatalerror("Program contains too many source files: \
***************
*** 169,175 ****
  }
  
  extern void output_file(void)
! {   FILE *fin; char new_name[128];
      int32 length, blanks=0, size, i, j;
  
      /*  Enter the length information into the header.                        */
--- 171,177 ----
  }
  
  extern void output_file(void)
! {   FILE *fin; char new_name[PATHLEN];
      int32 length, blanks=0, size, i, j;
  
      /*  Enter the length information into the header.                        */
***************
*** 361,367 ****
      }
  
  #ifdef ARCHIMEDES
!     {   char settype_command[128];
          sprintf(settype_command, "settype %s %s",
              new_name, riscos_file_type());
          system(settype_command);
--- 363,369 ----
      }
  
  #ifdef ARCHIMEDES
!     {   char settype_command[PATHLEN];
          sprintf(settype_command, "settype %s %s",
              new_name, riscos_file_type());
          system(settype_command);
***************
*** 422,428 ****
      transcript_open = FALSE;
  
  #ifdef ARCHIMEDES
!     {   char settype_command[128];
          sprintf(settype_command, "settype %s text",
              Transcript_Name);
          system(settype_command);
--- 424,430 ----
      transcript_open = FALSE;
  
  #ifdef ARCHIMEDES
!     {   char settype_command[PATHLEN];
          sprintf(settype_command, "settype %s text",
              Transcript_Name);
          system(settype_command);
diff -c V6.21/header.h Latest/header.h
*** V6.21/header.h	Wed Nov 24 10:44:14 1999
--- Latest/header.h	Fri Oct 15 07:47:20 1999
***************
*** 65,72 ****
  /*   out a block of definitions like those below.)                           */
  /* ------------------------------------------------------------------------- */
  
- #define ARCHIMEDES
- 
  /* ------------------------------------------------------------------------- */
  /*   The first task is to include the ANSI header files, and typedef         */
  /*   suitable 32-bit integer types.                                          */
--- 65,70 ----
diff -c V6.21/inform.c Latest/inform.c
*** V6.21/inform.c	Fri Oct 15 07:47:19 1999
--- Latest/inform.c	Wed Nov 24 10:59:53 1999
***************
*** 10,15 ****
--- 10,17 ----
  #define MAIN_INFORM_FILE
  #include "header.h"
  
+ #define PATHLEN 512
+ 
  /* ------------------------------------------------------------------------- */
  /*   Compiler progress                                                       */
  /* ------------------------------------------------------------------------- */
***************
*** 305,320 ****
  /*    Name translation code for filenames                                    */
  /* ------------------------------------------------------------------------- */
  
! static char Source_Path[128];
! static char Include_Path[128];
! static char Code_Path[128];
! static char Module_Path[128];
! static char Temporary_Path[128];
! static char current_source_path[128];
!        char Debugging_Name[128];
!        char Transcript_Name[128];
!        char Language_Name[128];
! static char ICL_Path[128];
  
  static void set_path_value(char *path, char *value)
  {   int i, j;
--- 307,322 ----
  /*    Name translation code for filenames                                    */
  /* ------------------------------------------------------------------------- */
  
! static char Source_Path[PATHLEN];
! static char Include_Path[PATHLEN];
! static char Code_Path[PATHLEN];
! static char Module_Path[PATHLEN];
! static char Temporary_Path[PATHLEN];
! static char current_source_path[PATHLEN];
!        char Debugging_Name[PATHLEN];
!        char Transcript_Name[PATHLEN];
!        char Language_Name[PATHLEN];
! static char ICL_Path[PATHLEN];
  
  static void set_path_value(char *path, char *value)
  {   int i, j;
***************
*** 358,365 ****
  
      if (command[i]==0) { new_value=command; path_to_set=Include_Path; }
      else
!     {   char pathname[128];
!         if (i>=128) i=127;
          new_value = command+i+1;
          for (j=0;j<i;j++)
              if (isupper(command[j])) pathname[j]=tolower(command[j]);
--- 360,367 ----
  
      if (command[i]==0) { new_value=command; path_to_set=Include_Path; }
      else
!     {   char pathname[PATHLEN];
!         if (i>=PATHLEN) i=PATHLEN-1;
          new_value = command+i+1;
          for (j=0;j<i;j++)
              if (isupper(command[j])) pathname[j]=tolower(command[j]);
***************
*** 585,592 ****
  }
  
  static void help_on_filenames(void)
! {   char old_name[128];
!     char new_name[128];
      int save_mm = module_switch, x;
  
      module_switch = FALSE;
--- 587,594 ----
  }
  
  static void help_on_filenames(void)
! {   char old_name[PATHLEN];
!     char new_name[PATHLEN];
      int save_mm = module_switch, x;
  
      module_switch = FALSE;
***************
*** 1250,1256 ****
          }
          else
          {   if (strcmp(fw, "compile")==0)
!             {   char story_name[128], code_name[128];
                  i += copy_icl_word(cli_buff + i, story_name);
                  i += copy_icl_word(cli_buff + i, code_name);
  
--- 1252,1258 ----
          }
          else
          {   if (strcmp(fw, "compile")==0)
!             {   char story_name[PATHLEN], code_name[PATHLEN];
                  i += copy_icl_word(cli_buff + i, story_name);
                  i += copy_icl_word(cli_buff + i, code_name);
  
***************
*** 1287,1293 ****
  }
  
  static void execute_icl_command(char *p)
! {   char filename[128], cli_buff[256];
      FILE *command_file;
  
      switch(p[0])
--- 1289,1295 ----
  }
  
  static void execute_icl_command(char *p)
! {   char filename[PATHLEN], cli_buff[256];
      FILE *command_file;
  
      switch(p[0])
